{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_282/Desktop/LambdaAssignments/GitClones/Intro-to-React/Intro-to-React/react/src/App.js\";\nimport './App.css';\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Row } from \"reactstrap\";\nimport Character from \"./components/Character\";\n\nconst App = () => {\n  const [char, setChar] = useState([]); // Try to think through what state you'll need for this app before starting. Then build out\n  // the state properties here.\n\n  useEffect(() => {\n    // Fetch characters from the API in an effect hook. Remember, anytime you have a \n    // side effect in a component, you want to think about which state and/or props it should\n    // sync up with, if any.\n    axios.get(\"https://rickandmortyapi.com/api/character\").then(response => {\n      console.log(response.data);\n      setChar(response.data);\n    }).catch(err => {\n      console.log(\"something went wrong\");\n    }).then(() => {\n      console.log(\"success\");\n    });\n  }, []);\n  console.log(char);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"Header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Characters\"), /*#__PURE__*/React.createElement(Character, {\n    characterArray: char,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/lambda_school_loaner_282/Desktop/LambdaAssignments/GitClones/Intro-to-React/Intro-to-React/react/src/App.js"],"names":["axios","React","useEffect","useState","Container","Row","Character","App","char","setChar","get","then","response","console","log","data","catch","err"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,YAA/B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CADkB,CAGhB;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AAChB;AACA;AACA;AACAF,IAAAA,KAAK,CAACU,GAAN,CAAU,2CAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAN,MAAAA,OAAO,CAACG,QAAQ,CAACG,IAAV,CAAP;AACD,KAJD,EAOCC,KAPD,CAOOC,GAAG,IAAI;AAACJ,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAAoC,KAPnD,EASDH,IATC,CASI,MAAM;AAACE,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAAuB,KATlC;AAWD,GAfU,EAeR,EAfQ,CAAT;AAgBFD,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,oBAAC,SAAD;AAAW,IAAA,cAAc,EAAGA,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AASD,CA/BD;;AAkCA,eAAeD,GAAf","sourcesContent":["import './App.css';\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Row } from \"reactstrap\";\nimport Character from \"./components/Character\"\n\nconst App = () => {\nconst [char, setChar] = useState([]);\n\n  // Try to think through what state you'll need for this app before starting. Then build out\n  // the state properties here.\n  useEffect(() => {\n  // Fetch characters from the API in an effect hook. Remember, anytime you have a \n  // side effect in a component, you want to think about which state and/or props it should\n  // sync up with, if any.\n  axios.get(\"https://rickandmortyapi.com/api/character\")\n  .then(response => {\n    console.log(response.data)\n    setChar(response.data);\n  }\n\n  )\n  .catch(err => {console.log(\"something went wrong\")})\n\n.then(() => {console.log(\"success\")})\n\n}, []);\nconsole.log(char)\n  return (\n    <div className=\"App\">\n      <h1 className=\"Header\">Characters</h1>\n      \n\n      <Character characterArray ={char}/>\n    </div>\n\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}